{"version":2,"kind":"Notebook","sha256":"a6a96a05cfcdf0b44fd82a39996eb6f78564155d8609947f80b0f2fcdf23bd92","slug":"dedl-hook-data-harvest","location":"/production/HOOK/DEDL-Hook_data_harvest.ipynb","dependencies":[],"frontmatter":{"title":"Hook - Perform data harvesting","subtitle":"This Notebook demonstrates how to perform data harvesting with Hook.","tags":["Hook","Authentication","Token"],"copyright":"Â© 2024 EUMETSAT","authors":[{"id":"Author: Eumetsat","name":"Author: Eumetsat"}],"license":{"content":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"thumbnail":"/EUMETSAT-icon-d7331ee180a04d4426f1cbab942483cf.png","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"numbering":{"title":{"offset":1}},"exports":[{"format":"ipynb","filename":"DEDL-Hook_data_harvest.ipynb","url":"/DEDL-Hook_data_harve-234859012db1349d108df30b9dc29537.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"div","style":{"margin":"6px 0"},"children":[{"type":"link","style":{"textDecoration":"none"},"url":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/HOOK/DEDL-Hook_data_harvest.ipynb","children":[{"type":"span","class":"launch","children":[{"type":"text","value":"ðŸš€ Launch in JupyterHub","key":"LYtogHMsQ4"}],"key":"P2HgW2r8Z4"}],"urlSource":"https://jupyter.central.data.destination-earth.eu/user-redirect/lab/tree/DestinE-DataLake-Lab/HOOK/DEDL-Hook_data_harvest.ipynb","key":"jhiUHvQtcV"}],"key":"f2QOpLhCIU"}],"key":"uOJAsTi0Zh"},{"type":"block","kind":"notebook-content","data":{"slideshow":{"slide_type":"skip"},"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The first step is to import the dependencies that allow the script to run","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b2eQHMfTJS"}],"key":"oHXt9qWvBa"}],"visibility":"show","key":"eT8NlPUeKP"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import json\nfrom io import BytesIO\nfrom urllib.parse import urlencode\nimport getpass\nimport pycurl\nimport requests\nfrom IPython.display import JSON","visibility":"show","key":"pMvabMloNA"},{"type":"output","id":"WtIcRLRWkcNS_EoCKv5-z","data":[],"visibility":"show","key":"ea2E6y2LCD"}],"visibility":"show","key":"bM5WryaUMH"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The following implement methods retrieve the token required to run the workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"n3K1q9u3hI"}],"key":"WToBbmzrc2"}],"key":"CR9VT7fbYk"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import requests\nfrom lxml import html\nfrom urllib.parse import parse_qs, urlparse\n\nIAM_URL = \"https://auth.destine.eu/\"\nCLIENT_ID = \"dedl-hook\"\nREALM = \"desp\"\nSERVICE_URL = \"https://odp.data.destination-earth.eu/odata/v1/\"\nTEST_RUN_ID = \"004\"\n\n\nclass DESPAuth:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def get_token(self):\n        with requests.Session() as s:\n\n            # Get the auth url\n            auth_url = html.fromstring(s.get(url=IAM_URL + \"/realms/\" + REALM + \"/protocol/openid-connect/auth\",\n                                     params = {\n                                            \"client_id\": CLIENT_ID,\n                                            \"redirect_uri\": SERVICE_URL,\n                                            \"scope\": \"openid\",\n                                            \"response_type\": \"code\"\n                                     }\n                                       ).content.decode()).forms[0].action\n            \n            # Login and get auth code\n            login = s.post(auth_url,\n                            data = {\n                                \"username\" : self.username,\n                                \"password\" : self.password,\n                            },\n                            allow_redirects=False\n            )\n\n\n            # We expect a 302, a 200 means we got sent back to the login page and there's probably an error message\n            if login.status_code == 200:\n                tree = html.fromstring(login.content)\n                error_message_element = tree.xpath('//span[@id=\"input-error\"]/text()')\n                error_message = error_message_element[0].strip() if error_message_element else 'Error message not found'\n                raise Exception(error_message)\n\n            if login.status_code != 302:\n                raise Exception(\"Login failed\")\n            \n\n            auth_code = parse_qs(urlparse(login.headers[\"Location\"]).query)['code'][0]\n\n            # Use the auth code to get the token\n            response = requests.post(IAM_URL + \"/realms/\" + REALM + \"/protocol/openid-connect/token\",\n                    data = {\n                        \"client_id\" : CLIENT_ID,\n                        \"redirect_uri\" : SERVICE_URL,\n                        \"code\" : auth_code,\n                        \"grant_type\" : \"authorization_code\",\n                        \"scope\" : \"\"\n                    }\n                )\n            \n            if response.status_code != 200:\n                raise Exception(\"Failed to get token\")\n\n            token = response.json()['access_token']\n        \n\n            return token\n\nclass DEDLAuth:\n    def __init__(self, desp_access_token):\n        self.desp_access_token = desp_access_token\n\n    def get_token(self):\n        DEDL_TOKEN_URL='https://identity.data.destination-earth.eu/auth/realms/dedl/protocol/openid-connect/token'\n        DEDL_CLIENT_ID='hda-public'\n        AUDIENCE='hda-public'\n        \n        data = { \n            \"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \n            \"subject_token\": self.desp_access_token,\n            \"subject_issuer\": \"desp-oidc\",\n            \"subject_token_type\": \"urn:ietf:params:oauth:token-type:access_token\",\n            \"client_id\": DEDL_CLIENT_ID,\n            \"audience\": AUDIENCE\n        }\n\n        response = requests.post(DEDL_TOKEN_URL, data=data)\n        \n        print(\"Response code:\", response.status_code)\n\n        if response.status_code == 200: \n            dedl_token = response.json()[\"access_token\"]\n            return dedl_token\n        else: \n            print(response.json())\n            print(\"Error obtaining DEDL access token\")\n            \nclass AuthHandler:\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        self.desp_access_token = None\n        self.dedl_access_token = None\n    \n    def get_token(self):\n        # Get DESP auth token\n        desp_auth = DESPAuth(self.username, self.password)\n        self.desp_access_token = desp_auth.get_token()\n        \n        # Get DEDL auth token\n        dedl_auth = DEDLAuth(self.desp_access_token)\n        self.dedl_access_token = dedl_auth.get_token()\n        \n        return self.dedl_access_token","visibility":"show","key":"oOZ7fw95qo"},{"type":"output","id":"qJKIesppGguOXpv0pTHdY","data":[],"visibility":"show","key":"LUPNTYPWX1"}],"visibility":"show","key":"X32PHXAJNS"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Users must provide their credentials to the DESP platform to retrieve an access token","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d9GGm2vJDQ"}],"key":"E5w7jVf5qB"}],"key":"bLpFi7YC09"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print('Provide credentials for the DESP')\ndesp_username = input('DESP Username: ')\ndesp_password = getpass.getpass(prompt='DESP Password: ', stream=None) \n\ntoken = AuthHandler(desp_username, desp_password)          \naccess_token = token.get_token()\napi_headers = {'Authorization': 'Bearer ' + access_token}","key":"UlVg8YtDVs"},{"type":"output","id":"w9Ij2UFF--ncAoT-NT3HN","data":[],"key":"cTwuCtXVSj"}],"key":"FqjYFS1At2"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can review an accepted parameters for workflows","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LPrpcfs4i8"}],"key":"rdIIhtQQAI"}],"key":"ITY2rCA4e0"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"workflow_options_url = SERVICE_URL + \"Workflows?$filter=Name+eq+\\'data-harvest\\'&$expand=WorkflowOptions\"\nresult = requests.get(workflow_options_url, headers=api_headers).json()\navailable_workflows = json.dumps(result,indent=2)\nJSON(result)","visibility":"show","key":"sYH9IUoLwr"},{"type":"output","id":"jLPVBY42QcK288HSEsww_","data":[],"visibility":"show","key":"pWLwpwuguo"}],"visibility":"show","key":"dKQyou6YPl"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prepare Worflow Options for data-harvest workflow","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YoG3bTqwxt"}],"key":"axcQtNTvkp"}],"visibility":"show","key":"Q4wHtrirkp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"workflow = \"data-harvest\"\nidentifier_list = [\"S2A_MSIL2A_20240501T095031_N0510_R079_T33UXT_20240501T135852.SAFE\"]\norder_body_custom_bucket = {\n        \"Name\": \"DEDL - Hook introduction support \" + workflow + \" - \" + TEST_RUN_ID,\n        \"WorkflowName\": workflow,\n        \"IdentifierList\": identifier_list,\n        \"WorkflowOptions\":[\n            {\"Name\": \"output_storage\", \"Value\": \"TEMPORARY\"},\n            {\"Name\": \"source_type\", \"Value\": \"DESP\"},\n            {\"Name\": \"desp_source_collection\", \"Value\": \"EO.ESA.DAT.SENTINEL-2.MSI.L2A\"},\n            {\"Name\": \"desp_source_username\", \"Value\": desp_username},\n            {\"Name\": \"desp_source_password\", \"Value\": desp_password},\n            \n        ]\n    }","key":"W9pdhmEook"},{"type":"output","id":"lIsxSlHFPj5Ck7dcFceX0","data":[],"key":"XbSOcUPP5c"}],"key":"LxsyFMGqcv"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Make a request to run the workflow with the parameters just set","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"K3vWBKn3dT"}],"key":"ofUGgwTEYX"}],"key":"FJZRwzQ33h"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"request = requests.post(\n    SERVICE_URL + \"BatchOrder/OData.CSC.Order\",\n    json.dumps(order_body_custom_bucket),\n    headers=api_headers\n)\nresp = request.json()\nprint(request.status_code)\norder_id = resp['value']['Id']\nJSON(resp, indent=2)","visibility":"show","key":"BIqdJ21Oz3"},{"type":"output","id":"QmCVkVAue4Xx5VhuH0chR","data":[],"visibility":"show","key":"ZJ42kSsour"}],"visibility":"show","key":"FI9tMS7ZO3"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Review information about the products processed in the order","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f8S6AmywgC"}],"key":"mdZOa4aaPS"}],"visibility":"show","key":"FOj4V3uxmg"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"batch_order_items = requests.get(SERVICE_URL + 'BatchOrder(' + str(order_id) + ')/Products', headers=api_headers).json()\nJSON(batch_order_items, indent=2)","key":"vZGFHFx9oX"},{"type":"output","id":"7KJzv-skS5ywHExWXQyvu","data":[],"key":"x5HPRdVzq3"}],"key":"Vur4vzKoI4"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Review processed product status","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"awmvPrzNHD"}],"key":"W981ALi7ZT"}],"key":"VXCami5OU1"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"batch_order_items['value'][0]['Status']","visibility":"show","key":"vlLndTtlrP"},{"type":"output","id":"Hbt9pnna64aYaIjyYd0NH","data":[],"visibility":"show","key":"W6xoDNPSwL"}],"visibility":"show","key":"cHvlIwaRBi"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Review processed product DownloadLink","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PJ58rShYNr"}],"key":"MZukeAKlqa"}],"key":"yMUomzcBMY"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"batch_order_items['value'][0]['DownloadLink']","visibility":"show","key":"SuXiQQdU7Q"},{"type":"output","id":"EJOEg8JpnofQrzz01RuEl","data":[],"visibility":"show","key":"kg7nD0QwP4"}],"visibility":"show","key":"dT8VYUpbmU"}],"key":"t5YEtn8EJb"},"references":{"cite":{"order":[],"data":{}}}}